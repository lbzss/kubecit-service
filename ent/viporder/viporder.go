// Code generated by ent, DO NOT EDIT.

package viporder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the viporder type in the database.
	Label = "vip_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBizID holds the string denoting the biz_id field in the database.
	FieldBizID = "biz_id"
	// FieldVipType holds the string denoting the vip_type field in the database.
	FieldVipType = "vip_type"
	// FieldPayType holds the string denoting the pay_type field in the database.
	FieldPayType = "pay_type"
	// FieldPayStatus holds the string denoting the pay_status field in the database.
	FieldPayStatus = "pay_status"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeUserOrder holds the string denoting the user_order edge name in mutations.
	EdgeUserOrder = "user_order"
	// Table holds the table name of the viporder in the database.
	Table = "vip_orders"
	// UserOrderTable is the table that holds the user_order relation/edge.
	UserOrderTable = "vip_orders"
	// UserOrderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserOrderInverseTable = "users"
	// UserOrderColumn is the table column denoting the user_order relation/edge.
	UserOrderColumn = "user_id"
)

// Columns holds all SQL columns for viporder fields.
var Columns = []string{
	FieldID,
	FieldBizID,
	FieldVipType,
	FieldPayType,
	FieldPayStatus,
	FieldCreateAt,
	FieldUpdateAt,
	FieldUserID,
	FieldPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() time.Time
)

// OrderOption defines the ordering options for the VipOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBizID orders the results by the biz_id field.
func ByBizID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizID, opts...).ToFunc()
}

// ByVipType orders the results by the vip_type field.
func ByVipType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVipType, opts...).ToFunc()
}

// ByPayType orders the results by the pay_type field.
func ByPayType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayType, opts...).ToFunc()
}

// ByPayStatus orders the results by the pay_status field.
func ByPayStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayStatus, opts...).ToFunc()
}

// ByCreateAt orders the results by the create_at field.
func ByCreateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateAt, opts...).ToFunc()
}

// ByUpdateAt orders the results by the update_at field.
func ByUpdateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByUserOrderField orders the results by user_order field.
func ByUserOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newUserOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserOrderTable, UserOrderColumn),
	)
}
