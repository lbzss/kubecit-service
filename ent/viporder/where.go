// Code generated by ent, DO NOT EDIT.

package viporder

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldID, id))
}

// BizID applies equality check predicate on the "biz_id" field. It's identical to BizIDEQ.
func BizID(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldBizID, v))
}

// VipType applies equality check predicate on the "vip_type" field. It's identical to VipTypeEQ.
func VipType(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldVipType, v))
}

// PayType applies equality check predicate on the "pay_type" field. It's identical to PayTypeEQ.
func PayType(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPayType, v))
}

// PayStatus applies equality check predicate on the "pay_status" field. It's identical to PayStatusEQ.
func PayStatus(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPayStatus, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldUpdateAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldUserID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPrice, v))
}

// BizIDEQ applies the EQ predicate on the "biz_id" field.
func BizIDEQ(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldBizID, v))
}

// BizIDNEQ applies the NEQ predicate on the "biz_id" field.
func BizIDNEQ(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldBizID, v))
}

// BizIDIn applies the In predicate on the "biz_id" field.
func BizIDIn(vs ...int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldBizID, vs...))
}

// BizIDNotIn applies the NotIn predicate on the "biz_id" field.
func BizIDNotIn(vs ...int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldBizID, vs...))
}

// BizIDGT applies the GT predicate on the "biz_id" field.
func BizIDGT(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldBizID, v))
}

// BizIDGTE applies the GTE predicate on the "biz_id" field.
func BizIDGTE(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldBizID, v))
}

// BizIDLT applies the LT predicate on the "biz_id" field.
func BizIDLT(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldBizID, v))
}

// BizIDLTE applies the LTE predicate on the "biz_id" field.
func BizIDLTE(v int64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldBizID, v))
}

// VipTypeEQ applies the EQ predicate on the "vip_type" field.
func VipTypeEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldVipType, v))
}

// VipTypeNEQ applies the NEQ predicate on the "vip_type" field.
func VipTypeNEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldVipType, v))
}

// VipTypeIn applies the In predicate on the "vip_type" field.
func VipTypeIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldVipType, vs...))
}

// VipTypeNotIn applies the NotIn predicate on the "vip_type" field.
func VipTypeNotIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldVipType, vs...))
}

// VipTypeGT applies the GT predicate on the "vip_type" field.
func VipTypeGT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldVipType, v))
}

// VipTypeGTE applies the GTE predicate on the "vip_type" field.
func VipTypeGTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldVipType, v))
}

// VipTypeLT applies the LT predicate on the "vip_type" field.
func VipTypeLT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldVipType, v))
}

// VipTypeLTE applies the LTE predicate on the "vip_type" field.
func VipTypeLTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldVipType, v))
}

// PayTypeEQ applies the EQ predicate on the "pay_type" field.
func PayTypeEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPayType, v))
}

// PayTypeNEQ applies the NEQ predicate on the "pay_type" field.
func PayTypeNEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldPayType, v))
}

// PayTypeIn applies the In predicate on the "pay_type" field.
func PayTypeIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldPayType, vs...))
}

// PayTypeNotIn applies the NotIn predicate on the "pay_type" field.
func PayTypeNotIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldPayType, vs...))
}

// PayTypeGT applies the GT predicate on the "pay_type" field.
func PayTypeGT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldPayType, v))
}

// PayTypeGTE applies the GTE predicate on the "pay_type" field.
func PayTypeGTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldPayType, v))
}

// PayTypeLT applies the LT predicate on the "pay_type" field.
func PayTypeLT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldPayType, v))
}

// PayTypeLTE applies the LTE predicate on the "pay_type" field.
func PayTypeLTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldPayType, v))
}

// PayStatusEQ applies the EQ predicate on the "pay_status" field.
func PayStatusEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPayStatus, v))
}

// PayStatusNEQ applies the NEQ predicate on the "pay_status" field.
func PayStatusNEQ(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldPayStatus, v))
}

// PayStatusIn applies the In predicate on the "pay_status" field.
func PayStatusIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldPayStatus, vs...))
}

// PayStatusNotIn applies the NotIn predicate on the "pay_status" field.
func PayStatusNotIn(vs ...int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldPayStatus, vs...))
}

// PayStatusGT applies the GT predicate on the "pay_status" field.
func PayStatusGT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldPayStatus, v))
}

// PayStatusGTE applies the GTE predicate on the "pay_status" field.
func PayStatusGTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldPayStatus, v))
}

// PayStatusLT applies the LT predicate on the "pay_status" field.
func PayStatusLT(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldPayStatus, v))
}

// PayStatusLTE applies the LTE predicate on the "pay_status" field.
func PayStatusLTE(v int8) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldPayStatus, v))
}

// PayStatusIsNil applies the IsNil predicate on the "pay_status" field.
func PayStatusIsNil() predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIsNull(FieldPayStatus))
}

// PayStatusNotNil applies the NotNil predicate on the "pay_status" field.
func PayStatusNotNil() predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotNull(FieldPayStatus))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldUpdateAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotNull(FieldUserID))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.VipOrder {
	return predicate.VipOrder(sql.FieldLTE(FieldPrice, v))
}

// HasUserOrder applies the HasEdge predicate on the "user_order" edge.
func HasUserOrder() predicate.VipOrder {
	return predicate.VipOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserOrderTable, UserOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOrderWith applies the HasEdge predicate on the "user_order" edge with a given conditions (other predicates).
func HasUserOrderWith(preds ...predicate.User) predicate.VipOrder {
	return predicate.VipOrder(func(s *sql.Selector) {
		step := newUserOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VipOrder) predicate.VipOrder {
	return predicate.VipOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VipOrder) predicate.VipOrder {
	return predicate.VipOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VipOrder) predicate.VipOrder {
	return predicate.VipOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
