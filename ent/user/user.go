// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// EdgeTeacher holds the string denoting the teacher edge name in mutations.
	EdgeTeacher = "teacher"
	// EdgeApplyRecord holds the string denoting the apply_record edge name in mutations.
	EdgeApplyRecord = "apply_record"
	// EdgeVipInfo holds the string denoting the vip_info edge name in mutations.
	EdgeVipInfo = "vip_info"
	// EdgeVipOrder holds the string denoting the vip_order edge name in mutations.
	EdgeVipOrder = "vip_order"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TeacherTable is the table that holds the teacher relation/edge.
	TeacherTable = "teachers"
	// TeacherInverseTable is the table name for the Teacher entity.
	// It exists in this package in order to avoid circular dependency with the "teacher" package.
	TeacherInverseTable = "teachers"
	// TeacherColumn is the table column denoting the teacher relation/edge.
	TeacherColumn = "user_id"
	// ApplyRecordTable is the table that holds the apply_record relation/edge.
	ApplyRecordTable = "apply_records"
	// ApplyRecordInverseTable is the table name for the ApplyRecord entity.
	// It exists in this package in order to avoid circular dependency with the "applyrecord" package.
	ApplyRecordInverseTable = "apply_records"
	// ApplyRecordColumn is the table column denoting the apply_record relation/edge.
	ApplyRecordColumn = "user_id"
	// VipInfoTable is the table that holds the vip_info relation/edge.
	VipInfoTable = "vip_infos"
	// VipInfoInverseTable is the table name for the VipInfo entity.
	// It exists in this package in order to avoid circular dependency with the "vipinfo" package.
	VipInfoInverseTable = "vip_infos"
	// VipInfoColumn is the table column denoting the vip_info relation/edge.
	VipInfoColumn = "user_id"
	// VipOrderTable is the table that holds the vip_order relation/edge.
	VipOrderTable = "vip_orders"
	// VipOrderInverseTable is the table name for the VipOrder entity.
	// It exists in this package in order to avoid circular dependency with the "viporder" package.
	VipOrderInverseTable = "vip_orders"
	// VipOrderColumn is the table column denoting the vip_order relation/edge.
	VipOrderColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldChannel,
	FieldRoleID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByTeacherField orders the results by teacher field.
func ByTeacherField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeacherStep(), sql.OrderByField(field, opts...))
	}
}

// ByApplyRecordCount orders the results by apply_record count.
func ByApplyRecordCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplyRecordStep(), opts...)
	}
}

// ByApplyRecord orders the results by apply_record terms.
func ByApplyRecord(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplyRecordStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVipInfoField orders the results by vip_info field.
func ByVipInfoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVipInfoStep(), sql.OrderByField(field, opts...))
	}
}

// ByVipOrderCount orders the results by vip_order count.
func ByVipOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVipOrderStep(), opts...)
	}
}

// ByVipOrder orders the results by vip_order terms.
func ByVipOrder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVipOrderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeacherStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeacherInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, TeacherTable, TeacherColumn),
	)
}
func newApplyRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplyRecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplyRecordTable, ApplyRecordColumn),
	)
}
func newVipInfoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VipInfoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VipInfoTable, VipInfoColumn),
	)
}
func newVipOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VipOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VipOrderTable, VipOrderColumn),
	)
}
