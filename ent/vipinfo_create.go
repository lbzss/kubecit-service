// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/user"
	"kubecit-service/ent/vipinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipInfoCreate is the builder for creating a VipInfo entity.
type VipInfoCreate struct {
	config
	mutation *VipInfoMutation
	hooks    []Hook
}

// SetVipType sets the "vip_type" field.
func (vic *VipInfoCreate) SetVipType(i int8) *VipInfoCreate {
	vic.mutation.SetVipType(i)
	return vic
}

// SetStartAt sets the "start_at" field.
func (vic *VipInfoCreate) SetStartAt(t time.Time) *VipInfoCreate {
	vic.mutation.SetStartAt(t)
	return vic
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (vic *VipInfoCreate) SetNillableStartAt(t *time.Time) *VipInfoCreate {
	if t != nil {
		vic.SetStartAt(*t)
	}
	return vic
}

// SetExpireAt sets the "expire_at" field.
func (vic *VipInfoCreate) SetExpireAt(t time.Time) *VipInfoCreate {
	vic.mutation.SetExpireAt(t)
	return vic
}

// SetUserID sets the "user_id" field.
func (vic *VipInfoCreate) SetUserID(i int) *VipInfoCreate {
	vic.mutation.SetUserID(i)
	return vic
}

// SetUserInfoID sets the "user_info" edge to the User entity by ID.
func (vic *VipInfoCreate) SetUserInfoID(id int) *VipInfoCreate {
	vic.mutation.SetUserInfoID(id)
	return vic
}

// SetUserInfo sets the "user_info" edge to the User entity.
func (vic *VipInfoCreate) SetUserInfo(u *User) *VipInfoCreate {
	return vic.SetUserInfoID(u.ID)
}

// Mutation returns the VipInfoMutation object of the builder.
func (vic *VipInfoCreate) Mutation() *VipInfoMutation {
	return vic.mutation
}

// Save creates the VipInfo in the database.
func (vic *VipInfoCreate) Save(ctx context.Context) (*VipInfo, error) {
	vic.defaults()
	return withHooks(ctx, vic.sqlSave, vic.mutation, vic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vic *VipInfoCreate) SaveX(ctx context.Context) *VipInfo {
	v, err := vic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vic *VipInfoCreate) Exec(ctx context.Context) error {
	_, err := vic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vic *VipInfoCreate) ExecX(ctx context.Context) {
	if err := vic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vic *VipInfoCreate) defaults() {
	if _, ok := vic.mutation.StartAt(); !ok {
		v := vipinfo.DefaultStartAt()
		vic.mutation.SetStartAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vic *VipInfoCreate) check() error {
	if _, ok := vic.mutation.VipType(); !ok {
		return &ValidationError{Name: "vip_type", err: errors.New(`ent: missing required field "VipInfo.vip_type"`)}
	}
	if _, ok := vic.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "VipInfo.start_at"`)}
	}
	if _, ok := vic.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "expire_at", err: errors.New(`ent: missing required field "VipInfo.expire_at"`)}
	}
	if _, ok := vic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "VipInfo.user_id"`)}
	}
	if _, ok := vic.mutation.UserInfoID(); !ok {
		return &ValidationError{Name: "user_info", err: errors.New(`ent: missing required edge "VipInfo.user_info"`)}
	}
	return nil
}

func (vic *VipInfoCreate) sqlSave(ctx context.Context) (*VipInfo, error) {
	if err := vic.check(); err != nil {
		return nil, err
	}
	_node, _spec := vic.createSpec()
	if err := sqlgraph.CreateNode(ctx, vic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vic.mutation.id = &_node.ID
	vic.mutation.done = true
	return _node, nil
}

func (vic *VipInfoCreate) createSpec() (*VipInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &VipInfo{config: vic.config}
		_spec = sqlgraph.NewCreateSpec(vipinfo.Table, sqlgraph.NewFieldSpec(vipinfo.FieldID, field.TypeInt))
	)
	if value, ok := vic.mutation.VipType(); ok {
		_spec.SetField(vipinfo.FieldVipType, field.TypeInt8, value)
		_node.VipType = value
	}
	if value, ok := vic.mutation.StartAt(); ok {
		_spec.SetField(vipinfo.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := vic.mutation.ExpireAt(); ok {
		_spec.SetField(vipinfo.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = value
	}
	if nodes := vic.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vipinfo.UserInfoTable,
			Columns: []string{vipinfo.UserInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VipInfoCreateBulk is the builder for creating many VipInfo entities in bulk.
type VipInfoCreateBulk struct {
	config
	builders []*VipInfoCreate
}

// Save creates the VipInfo entities in the database.
func (vicb *VipInfoCreateBulk) Save(ctx context.Context) ([]*VipInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vicb.builders))
	nodes := make([]*VipInfo, len(vicb.builders))
	mutators := make([]Mutator, len(vicb.builders))
	for i := range vicb.builders {
		func(i int, root context.Context) {
			builder := vicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VipInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vicb *VipInfoCreateBulk) SaveX(ctx context.Context) []*VipInfo {
	v, err := vicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vicb *VipInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := vicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vicb *VipInfoCreateBulk) ExecX(ctx context.Context) {
	if err := vicb.Exec(ctx); err != nil {
		panic(err)
	}
}
