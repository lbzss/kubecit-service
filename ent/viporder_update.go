// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/user"
	"kubecit-service/ent/viporder"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipOrderUpdate is the builder for updating VipOrder entities.
type VipOrderUpdate struct {
	config
	hooks    []Hook
	mutation *VipOrderMutation
}

// Where appends a list predicates to the VipOrderUpdate builder.
func (vou *VipOrderUpdate) Where(ps ...predicate.VipOrder) *VipOrderUpdate {
	vou.mutation.Where(ps...)
	return vou
}

// SetBizID sets the "biz_id" field.
func (vou *VipOrderUpdate) SetBizID(i int64) *VipOrderUpdate {
	vou.mutation.ResetBizID()
	vou.mutation.SetBizID(i)
	return vou
}

// AddBizID adds i to the "biz_id" field.
func (vou *VipOrderUpdate) AddBizID(i int64) *VipOrderUpdate {
	vou.mutation.AddBizID(i)
	return vou
}

// SetVipType sets the "vip_type" field.
func (vou *VipOrderUpdate) SetVipType(i int8) *VipOrderUpdate {
	vou.mutation.ResetVipType()
	vou.mutation.SetVipType(i)
	return vou
}

// AddVipType adds i to the "vip_type" field.
func (vou *VipOrderUpdate) AddVipType(i int8) *VipOrderUpdate {
	vou.mutation.AddVipType(i)
	return vou
}

// SetPayType sets the "pay_type" field.
func (vou *VipOrderUpdate) SetPayType(i int8) *VipOrderUpdate {
	vou.mutation.ResetPayType()
	vou.mutation.SetPayType(i)
	return vou
}

// AddPayType adds i to the "pay_type" field.
func (vou *VipOrderUpdate) AddPayType(i int8) *VipOrderUpdate {
	vou.mutation.AddPayType(i)
	return vou
}

// SetPayStatus sets the "pay_status" field.
func (vou *VipOrderUpdate) SetPayStatus(i int8) *VipOrderUpdate {
	vou.mutation.ResetPayStatus()
	vou.mutation.SetPayStatus(i)
	return vou
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (vou *VipOrderUpdate) SetNillablePayStatus(i *int8) *VipOrderUpdate {
	if i != nil {
		vou.SetPayStatus(*i)
	}
	return vou
}

// AddPayStatus adds i to the "pay_status" field.
func (vou *VipOrderUpdate) AddPayStatus(i int8) *VipOrderUpdate {
	vou.mutation.AddPayStatus(i)
	return vou
}

// ClearPayStatus clears the value of the "pay_status" field.
func (vou *VipOrderUpdate) ClearPayStatus() *VipOrderUpdate {
	vou.mutation.ClearPayStatus()
	return vou
}

// SetCreateAt sets the "create_at" field.
func (vou *VipOrderUpdate) SetCreateAt(t time.Time) *VipOrderUpdate {
	vou.mutation.SetCreateAt(t)
	return vou
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (vou *VipOrderUpdate) SetNillableCreateAt(t *time.Time) *VipOrderUpdate {
	if t != nil {
		vou.SetCreateAt(*t)
	}
	return vou
}

// SetUpdateAt sets the "update_at" field.
func (vou *VipOrderUpdate) SetUpdateAt(t time.Time) *VipOrderUpdate {
	vou.mutation.SetUpdateAt(t)
	return vou
}

// SetUserID sets the "user_id" field.
func (vou *VipOrderUpdate) SetUserID(i int) *VipOrderUpdate {
	vou.mutation.SetUserID(i)
	return vou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vou *VipOrderUpdate) SetNillableUserID(i *int) *VipOrderUpdate {
	if i != nil {
		vou.SetUserID(*i)
	}
	return vou
}

// ClearUserID clears the value of the "user_id" field.
func (vou *VipOrderUpdate) ClearUserID() *VipOrderUpdate {
	vou.mutation.ClearUserID()
	return vou
}

// SetPrice sets the "price" field.
func (vou *VipOrderUpdate) SetPrice(f float64) *VipOrderUpdate {
	vou.mutation.ResetPrice()
	vou.mutation.SetPrice(f)
	return vou
}

// AddPrice adds f to the "price" field.
func (vou *VipOrderUpdate) AddPrice(f float64) *VipOrderUpdate {
	vou.mutation.AddPrice(f)
	return vou
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (vou *VipOrderUpdate) SetUserOrderID(id int) *VipOrderUpdate {
	vou.mutation.SetUserOrderID(id)
	return vou
}

// SetNillableUserOrderID sets the "user_order" edge to the User entity by ID if the given value is not nil.
func (vou *VipOrderUpdate) SetNillableUserOrderID(id *int) *VipOrderUpdate {
	if id != nil {
		vou = vou.SetUserOrderID(*id)
	}
	return vou
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (vou *VipOrderUpdate) SetUserOrder(u *User) *VipOrderUpdate {
	return vou.SetUserOrderID(u.ID)
}

// Mutation returns the VipOrderMutation object of the builder.
func (vou *VipOrderUpdate) Mutation() *VipOrderMutation {
	return vou.mutation
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (vou *VipOrderUpdate) ClearUserOrder() *VipOrderUpdate {
	vou.mutation.ClearUserOrder()
	return vou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vou *VipOrderUpdate) Save(ctx context.Context) (int, error) {
	vou.defaults()
	return withHooks(ctx, vou.sqlSave, vou.mutation, vou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vou *VipOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := vou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vou *VipOrderUpdate) Exec(ctx context.Context) error {
	_, err := vou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vou *VipOrderUpdate) ExecX(ctx context.Context) {
	if err := vou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vou *VipOrderUpdate) defaults() {
	if _, ok := vou.mutation.UpdateAt(); !ok {
		v := viporder.UpdateDefaultUpdateAt()
		vou.mutation.SetUpdateAt(v)
	}
}

func (vou *VipOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(viporder.Table, viporder.Columns, sqlgraph.NewFieldSpec(viporder.FieldID, field.TypeInt))
	if ps := vou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vou.mutation.BizID(); ok {
		_spec.SetField(viporder.FieldBizID, field.TypeInt64, value)
	}
	if value, ok := vou.mutation.AddedBizID(); ok {
		_spec.AddField(viporder.FieldBizID, field.TypeInt64, value)
	}
	if value, ok := vou.mutation.VipType(); ok {
		_spec.SetField(viporder.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := vou.mutation.AddedVipType(); ok {
		_spec.AddField(viporder.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := vou.mutation.PayType(); ok {
		_spec.SetField(viporder.FieldPayType, field.TypeInt8, value)
	}
	if value, ok := vou.mutation.AddedPayType(); ok {
		_spec.AddField(viporder.FieldPayType, field.TypeInt8, value)
	}
	if value, ok := vou.mutation.PayStatus(); ok {
		_spec.SetField(viporder.FieldPayStatus, field.TypeInt8, value)
	}
	if value, ok := vou.mutation.AddedPayStatus(); ok {
		_spec.AddField(viporder.FieldPayStatus, field.TypeInt8, value)
	}
	if vou.mutation.PayStatusCleared() {
		_spec.ClearField(viporder.FieldPayStatus, field.TypeInt8)
	}
	if value, ok := vou.mutation.CreateAt(); ok {
		_spec.SetField(viporder.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := vou.mutation.UpdateAt(); ok {
		_spec.SetField(viporder.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := vou.mutation.Price(); ok {
		_spec.SetField(viporder.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vou.mutation.AddedPrice(); ok {
		_spec.AddField(viporder.FieldPrice, field.TypeFloat64, value)
	}
	if vou.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viporder.UserOrderTable,
			Columns: []string{viporder.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vou.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viporder.UserOrderTable,
			Columns: []string{viporder.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viporder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vou.mutation.done = true
	return n, nil
}

// VipOrderUpdateOne is the builder for updating a single VipOrder entity.
type VipOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VipOrderMutation
}

// SetBizID sets the "biz_id" field.
func (vouo *VipOrderUpdateOne) SetBizID(i int64) *VipOrderUpdateOne {
	vouo.mutation.ResetBizID()
	vouo.mutation.SetBizID(i)
	return vouo
}

// AddBizID adds i to the "biz_id" field.
func (vouo *VipOrderUpdateOne) AddBizID(i int64) *VipOrderUpdateOne {
	vouo.mutation.AddBizID(i)
	return vouo
}

// SetVipType sets the "vip_type" field.
func (vouo *VipOrderUpdateOne) SetVipType(i int8) *VipOrderUpdateOne {
	vouo.mutation.ResetVipType()
	vouo.mutation.SetVipType(i)
	return vouo
}

// AddVipType adds i to the "vip_type" field.
func (vouo *VipOrderUpdateOne) AddVipType(i int8) *VipOrderUpdateOne {
	vouo.mutation.AddVipType(i)
	return vouo
}

// SetPayType sets the "pay_type" field.
func (vouo *VipOrderUpdateOne) SetPayType(i int8) *VipOrderUpdateOne {
	vouo.mutation.ResetPayType()
	vouo.mutation.SetPayType(i)
	return vouo
}

// AddPayType adds i to the "pay_type" field.
func (vouo *VipOrderUpdateOne) AddPayType(i int8) *VipOrderUpdateOne {
	vouo.mutation.AddPayType(i)
	return vouo
}

// SetPayStatus sets the "pay_status" field.
func (vouo *VipOrderUpdateOne) SetPayStatus(i int8) *VipOrderUpdateOne {
	vouo.mutation.ResetPayStatus()
	vouo.mutation.SetPayStatus(i)
	return vouo
}

// SetNillablePayStatus sets the "pay_status" field if the given value is not nil.
func (vouo *VipOrderUpdateOne) SetNillablePayStatus(i *int8) *VipOrderUpdateOne {
	if i != nil {
		vouo.SetPayStatus(*i)
	}
	return vouo
}

// AddPayStatus adds i to the "pay_status" field.
func (vouo *VipOrderUpdateOne) AddPayStatus(i int8) *VipOrderUpdateOne {
	vouo.mutation.AddPayStatus(i)
	return vouo
}

// ClearPayStatus clears the value of the "pay_status" field.
func (vouo *VipOrderUpdateOne) ClearPayStatus() *VipOrderUpdateOne {
	vouo.mutation.ClearPayStatus()
	return vouo
}

// SetCreateAt sets the "create_at" field.
func (vouo *VipOrderUpdateOne) SetCreateAt(t time.Time) *VipOrderUpdateOne {
	vouo.mutation.SetCreateAt(t)
	return vouo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (vouo *VipOrderUpdateOne) SetNillableCreateAt(t *time.Time) *VipOrderUpdateOne {
	if t != nil {
		vouo.SetCreateAt(*t)
	}
	return vouo
}

// SetUpdateAt sets the "update_at" field.
func (vouo *VipOrderUpdateOne) SetUpdateAt(t time.Time) *VipOrderUpdateOne {
	vouo.mutation.SetUpdateAt(t)
	return vouo
}

// SetUserID sets the "user_id" field.
func (vouo *VipOrderUpdateOne) SetUserID(i int) *VipOrderUpdateOne {
	vouo.mutation.SetUserID(i)
	return vouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (vouo *VipOrderUpdateOne) SetNillableUserID(i *int) *VipOrderUpdateOne {
	if i != nil {
		vouo.SetUserID(*i)
	}
	return vouo
}

// ClearUserID clears the value of the "user_id" field.
func (vouo *VipOrderUpdateOne) ClearUserID() *VipOrderUpdateOne {
	vouo.mutation.ClearUserID()
	return vouo
}

// SetPrice sets the "price" field.
func (vouo *VipOrderUpdateOne) SetPrice(f float64) *VipOrderUpdateOne {
	vouo.mutation.ResetPrice()
	vouo.mutation.SetPrice(f)
	return vouo
}

// AddPrice adds f to the "price" field.
func (vouo *VipOrderUpdateOne) AddPrice(f float64) *VipOrderUpdateOne {
	vouo.mutation.AddPrice(f)
	return vouo
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (vouo *VipOrderUpdateOne) SetUserOrderID(id int) *VipOrderUpdateOne {
	vouo.mutation.SetUserOrderID(id)
	return vouo
}

// SetNillableUserOrderID sets the "user_order" edge to the User entity by ID if the given value is not nil.
func (vouo *VipOrderUpdateOne) SetNillableUserOrderID(id *int) *VipOrderUpdateOne {
	if id != nil {
		vouo = vouo.SetUserOrderID(*id)
	}
	return vouo
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (vouo *VipOrderUpdateOne) SetUserOrder(u *User) *VipOrderUpdateOne {
	return vouo.SetUserOrderID(u.ID)
}

// Mutation returns the VipOrderMutation object of the builder.
func (vouo *VipOrderUpdateOne) Mutation() *VipOrderMutation {
	return vouo.mutation
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (vouo *VipOrderUpdateOne) ClearUserOrder() *VipOrderUpdateOne {
	vouo.mutation.ClearUserOrder()
	return vouo
}

// Where appends a list predicates to the VipOrderUpdate builder.
func (vouo *VipOrderUpdateOne) Where(ps ...predicate.VipOrder) *VipOrderUpdateOne {
	vouo.mutation.Where(ps...)
	return vouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vouo *VipOrderUpdateOne) Select(field string, fields ...string) *VipOrderUpdateOne {
	vouo.fields = append([]string{field}, fields...)
	return vouo
}

// Save executes the query and returns the updated VipOrder entity.
func (vouo *VipOrderUpdateOne) Save(ctx context.Context) (*VipOrder, error) {
	vouo.defaults()
	return withHooks(ctx, vouo.sqlSave, vouo.mutation, vouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vouo *VipOrderUpdateOne) SaveX(ctx context.Context) *VipOrder {
	node, err := vouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vouo *VipOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := vouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vouo *VipOrderUpdateOne) ExecX(ctx context.Context) {
	if err := vouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vouo *VipOrderUpdateOne) defaults() {
	if _, ok := vouo.mutation.UpdateAt(); !ok {
		v := viporder.UpdateDefaultUpdateAt()
		vouo.mutation.SetUpdateAt(v)
	}
}

func (vouo *VipOrderUpdateOne) sqlSave(ctx context.Context) (_node *VipOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(viporder.Table, viporder.Columns, sqlgraph.NewFieldSpec(viporder.FieldID, field.TypeInt))
	id, ok := vouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VipOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viporder.FieldID)
		for _, f := range fields {
			if !viporder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != viporder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vouo.mutation.BizID(); ok {
		_spec.SetField(viporder.FieldBizID, field.TypeInt64, value)
	}
	if value, ok := vouo.mutation.AddedBizID(); ok {
		_spec.AddField(viporder.FieldBizID, field.TypeInt64, value)
	}
	if value, ok := vouo.mutation.VipType(); ok {
		_spec.SetField(viporder.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := vouo.mutation.AddedVipType(); ok {
		_spec.AddField(viporder.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := vouo.mutation.PayType(); ok {
		_spec.SetField(viporder.FieldPayType, field.TypeInt8, value)
	}
	if value, ok := vouo.mutation.AddedPayType(); ok {
		_spec.AddField(viporder.FieldPayType, field.TypeInt8, value)
	}
	if value, ok := vouo.mutation.PayStatus(); ok {
		_spec.SetField(viporder.FieldPayStatus, field.TypeInt8, value)
	}
	if value, ok := vouo.mutation.AddedPayStatus(); ok {
		_spec.AddField(viporder.FieldPayStatus, field.TypeInt8, value)
	}
	if vouo.mutation.PayStatusCleared() {
		_spec.ClearField(viporder.FieldPayStatus, field.TypeInt8)
	}
	if value, ok := vouo.mutation.CreateAt(); ok {
		_spec.SetField(viporder.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := vouo.mutation.UpdateAt(); ok {
		_spec.SetField(viporder.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := vouo.mutation.Price(); ok {
		_spec.SetField(viporder.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vouo.mutation.AddedPrice(); ok {
		_spec.AddField(viporder.FieldPrice, field.TypeFloat64, value)
	}
	if vouo.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viporder.UserOrderTable,
			Columns: []string{viporder.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vouo.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viporder.UserOrderTable,
			Columns: []string{viporder.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VipOrder{config: vouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viporder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vouo.mutation.done = true
	return _node, nil
}
