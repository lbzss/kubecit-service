// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/vipproduct"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipProductUpdate is the builder for updating VipProduct entities.
type VipProductUpdate struct {
	config
	hooks    []Hook
	mutation *VipProductMutation
}

// Where appends a list predicates to the VipProductUpdate builder.
func (vpu *VipProductUpdate) Where(ps ...predicate.VipProduct) *VipProductUpdate {
	vpu.mutation.Where(ps...)
	return vpu
}

// SetPrice sets the "price" field.
func (vpu *VipProductUpdate) SetPrice(f float64) *VipProductUpdate {
	vpu.mutation.ResetPrice()
	vpu.mutation.SetPrice(f)
	return vpu
}

// AddPrice adds f to the "price" field.
func (vpu *VipProductUpdate) AddPrice(f float64) *VipProductUpdate {
	vpu.mutation.AddPrice(f)
	return vpu
}

// SetName sets the "name" field.
func (vpu *VipProductUpdate) SetName(s string) *VipProductUpdate {
	vpu.mutation.SetName(s)
	return vpu
}

// SetDescription sets the "description" field.
func (vpu *VipProductUpdate) SetDescription(s string) *VipProductUpdate {
	vpu.mutation.SetDescription(s)
	return vpu
}

// Mutation returns the VipProductMutation object of the builder.
func (vpu *VipProductUpdate) Mutation() *VipProductMutation {
	return vpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vpu *VipProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vpu.sqlSave, vpu.mutation, vpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpu *VipProductUpdate) SaveX(ctx context.Context) int {
	affected, err := vpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vpu *VipProductUpdate) Exec(ctx context.Context) error {
	_, err := vpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpu *VipProductUpdate) ExecX(ctx context.Context) {
	if err := vpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vpu *VipProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vipproduct.Table, vipproduct.Columns, sqlgraph.NewFieldSpec(vipproduct.FieldID, field.TypeInt))
	if ps := vpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpu.mutation.Price(); ok {
		_spec.SetField(vipproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vpu.mutation.AddedPrice(); ok {
		_spec.AddField(vipproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vpu.mutation.Name(); ok {
		_spec.SetField(vipproduct.FieldName, field.TypeString, value)
	}
	if value, ok := vpu.mutation.Description(); ok {
		_spec.SetField(vipproduct.FieldDescription, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vpu.mutation.done = true
	return n, nil
}

// VipProductUpdateOne is the builder for updating a single VipProduct entity.
type VipProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VipProductMutation
}

// SetPrice sets the "price" field.
func (vpuo *VipProductUpdateOne) SetPrice(f float64) *VipProductUpdateOne {
	vpuo.mutation.ResetPrice()
	vpuo.mutation.SetPrice(f)
	return vpuo
}

// AddPrice adds f to the "price" field.
func (vpuo *VipProductUpdateOne) AddPrice(f float64) *VipProductUpdateOne {
	vpuo.mutation.AddPrice(f)
	return vpuo
}

// SetName sets the "name" field.
func (vpuo *VipProductUpdateOne) SetName(s string) *VipProductUpdateOne {
	vpuo.mutation.SetName(s)
	return vpuo
}

// SetDescription sets the "description" field.
func (vpuo *VipProductUpdateOne) SetDescription(s string) *VipProductUpdateOne {
	vpuo.mutation.SetDescription(s)
	return vpuo
}

// Mutation returns the VipProductMutation object of the builder.
func (vpuo *VipProductUpdateOne) Mutation() *VipProductMutation {
	return vpuo.mutation
}

// Where appends a list predicates to the VipProductUpdate builder.
func (vpuo *VipProductUpdateOne) Where(ps ...predicate.VipProduct) *VipProductUpdateOne {
	vpuo.mutation.Where(ps...)
	return vpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vpuo *VipProductUpdateOne) Select(field string, fields ...string) *VipProductUpdateOne {
	vpuo.fields = append([]string{field}, fields...)
	return vpuo
}

// Save executes the query and returns the updated VipProduct entity.
func (vpuo *VipProductUpdateOne) Save(ctx context.Context) (*VipProduct, error) {
	return withHooks(ctx, vpuo.sqlSave, vpuo.mutation, vpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vpuo *VipProductUpdateOne) SaveX(ctx context.Context) *VipProduct {
	node, err := vpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vpuo *VipProductUpdateOne) Exec(ctx context.Context) error {
	_, err := vpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpuo *VipProductUpdateOne) ExecX(ctx context.Context) {
	if err := vpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vpuo *VipProductUpdateOne) sqlSave(ctx context.Context) (_node *VipProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(vipproduct.Table, vipproduct.Columns, sqlgraph.NewFieldSpec(vipproduct.FieldID, field.TypeInt))
	id, ok := vpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VipProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vipproduct.FieldID)
		for _, f := range fields {
			if !vipproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vipproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vpuo.mutation.Price(); ok {
		_spec.SetField(vipproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vpuo.mutation.AddedPrice(); ok {
		_spec.AddField(vipproduct.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := vpuo.mutation.Name(); ok {
		_spec.SetField(vipproduct.FieldName, field.TypeString, value)
	}
	if value, ok := vpuo.mutation.Description(); ok {
		_spec.SetField(vipproduct.FieldDescription, field.TypeString, value)
	}
	_node = &VipProduct{config: vpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vpuo.mutation.done = true
	return _node, nil
}
