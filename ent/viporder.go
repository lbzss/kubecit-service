// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/user"
	"kubecit-service/ent/viporder"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VipOrder is the model entity for the VipOrder schema.
type VipOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 业务订单号
	BizID int64 `json:"biz_id,omitempty"`
	// 会员类型
	VipType int8 `json:"vip_type,omitempty"`
	// 支付类型
	PayType int8 `json:"pay_type,omitempty"`
	// 支付状态
	PayStatus int8 `json:"pay_status,omitempty"`
	// 创建时间
	CreateAt time.Time `json:"create_at,omitempty"`
	// 更新时间
	UpdateAt time.Time `json:"update_at,omitempty"`
	// 用户id
	UserID int `json:"user_id,omitempty"`
	// 订单价格
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VipOrderQuery when eager-loading is set.
	Edges        VipOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VipOrderEdges holds the relations/edges for other nodes in the graph.
type VipOrderEdges struct {
	// UserOrder holds the value of the user_order edge.
	UserOrder *User `json:"user_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrderOrErr returns the UserOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VipOrderEdges) UserOrderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.UserOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserOrder, nil
	}
	return nil, &NotLoadedError{edge: "user_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VipOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case viporder.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case viporder.FieldID, viporder.FieldBizID, viporder.FieldVipType, viporder.FieldPayType, viporder.FieldPayStatus, viporder.FieldUserID:
			values[i] = new(sql.NullInt64)
		case viporder.FieldCreateAt, viporder.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VipOrder fields.
func (vo *VipOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case viporder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vo.ID = int(value.Int64)
		case viporder.FieldBizID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field biz_id", values[i])
			} else if value.Valid {
				vo.BizID = value.Int64
			}
		case viporder.FieldVipType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vip_type", values[i])
			} else if value.Valid {
				vo.VipType = int8(value.Int64)
			}
		case viporder.FieldPayType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_type", values[i])
			} else if value.Valid {
				vo.PayType = int8(value.Int64)
			}
		case viporder.FieldPayStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pay_status", values[i])
			} else if value.Valid {
				vo.PayStatus = int8(value.Int64)
			}
		case viporder.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				vo.CreateAt = value.Time
			}
		case viporder.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				vo.UpdateAt = value.Time
			}
		case viporder.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vo.UserID = int(value.Int64)
			}
		case viporder.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				vo.Price = value.Float64
			}
		default:
			vo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VipOrder.
// This includes values selected through modifiers, order, etc.
func (vo *VipOrder) Value(name string) (ent.Value, error) {
	return vo.selectValues.Get(name)
}

// QueryUserOrder queries the "user_order" edge of the VipOrder entity.
func (vo *VipOrder) QueryUserOrder() *UserQuery {
	return NewVipOrderClient(vo.config).QueryUserOrder(vo)
}

// Update returns a builder for updating this VipOrder.
// Note that you need to call VipOrder.Unwrap() before calling this method if this VipOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (vo *VipOrder) Update() *VipOrderUpdateOne {
	return NewVipOrderClient(vo.config).UpdateOne(vo)
}

// Unwrap unwraps the VipOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vo *VipOrder) Unwrap() *VipOrder {
	_tx, ok := vo.config.driver.(*txDriver)
	if !ok {
		panic("ent: VipOrder is not a transactional entity")
	}
	vo.config.driver = _tx.drv
	return vo
}

// String implements the fmt.Stringer.
func (vo *VipOrder) String() string {
	var builder strings.Builder
	builder.WriteString("VipOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vo.ID))
	builder.WriteString("biz_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.BizID))
	builder.WriteString(", ")
	builder.WriteString("vip_type=")
	builder.WriteString(fmt.Sprintf("%v", vo.VipType))
	builder.WriteString(", ")
	builder.WriteString("pay_type=")
	builder.WriteString(fmt.Sprintf("%v", vo.PayType))
	builder.WriteString(", ")
	builder.WriteString("pay_status=")
	builder.WriteString(fmt.Sprintf("%v", vo.PayStatus))
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(vo.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(vo.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", vo.UserID))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", vo.Price))
	builder.WriteByte(')')
	return builder.String()
}

// VipOrders is a parsable slice of VipOrder.
type VipOrders []*VipOrder
