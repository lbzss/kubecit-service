// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/vipproduct"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipProductCreate is the builder for creating a VipProduct entity.
type VipProductCreate struct {
	config
	mutation *VipProductMutation
	hooks    []Hook
}

// SetPrice sets the "price" field.
func (vpc *VipProductCreate) SetPrice(f float64) *VipProductCreate {
	vpc.mutation.SetPrice(f)
	return vpc
}

// SetName sets the "name" field.
func (vpc *VipProductCreate) SetName(s string) *VipProductCreate {
	vpc.mutation.SetName(s)
	return vpc
}

// SetDescription sets the "description" field.
func (vpc *VipProductCreate) SetDescription(s string) *VipProductCreate {
	vpc.mutation.SetDescription(s)
	return vpc
}

// Mutation returns the VipProductMutation object of the builder.
func (vpc *VipProductCreate) Mutation() *VipProductMutation {
	return vpc.mutation
}

// Save creates the VipProduct in the database.
func (vpc *VipProductCreate) Save(ctx context.Context) (*VipProduct, error) {
	return withHooks(ctx, vpc.sqlSave, vpc.mutation, vpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vpc *VipProductCreate) SaveX(ctx context.Context) *VipProduct {
	v, err := vpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpc *VipProductCreate) Exec(ctx context.Context) error {
	_, err := vpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpc *VipProductCreate) ExecX(ctx context.Context) {
	if err := vpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vpc *VipProductCreate) check() error {
	if _, ok := vpc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "VipProduct.price"`)}
	}
	if _, ok := vpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "VipProduct.name"`)}
	}
	if _, ok := vpc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "VipProduct.description"`)}
	}
	return nil
}

func (vpc *VipProductCreate) sqlSave(ctx context.Context) (*VipProduct, error) {
	if err := vpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vpc.mutation.id = &_node.ID
	vpc.mutation.done = true
	return _node, nil
}

func (vpc *VipProductCreate) createSpec() (*VipProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &VipProduct{config: vpc.config}
		_spec = sqlgraph.NewCreateSpec(vipproduct.Table, sqlgraph.NewFieldSpec(vipproduct.FieldID, field.TypeInt))
	)
	if value, ok := vpc.mutation.Price(); ok {
		_spec.SetField(vipproduct.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := vpc.mutation.Name(); ok {
		_spec.SetField(vipproduct.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vpc.mutation.Description(); ok {
		_spec.SetField(vipproduct.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// VipProductCreateBulk is the builder for creating many VipProduct entities in bulk.
type VipProductCreateBulk struct {
	config
	builders []*VipProductCreate
}

// Save creates the VipProduct entities in the database.
func (vpcb *VipProductCreateBulk) Save(ctx context.Context) ([]*VipProduct, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vpcb.builders))
	nodes := make([]*VipProduct, len(vpcb.builders))
	mutators := make([]Mutator, len(vpcb.builders))
	for i := range vpcb.builders {
		func(i int, root context.Context) {
			builder := vpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VipProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vpcb *VipProductCreateBulk) SaveX(ctx context.Context) []*VipProduct {
	v, err := vpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vpcb *VipProductCreateBulk) Exec(ctx context.Context) error {
	_, err := vpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vpcb *VipProductCreateBulk) ExecX(ctx context.Context) {
	if err := vpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
