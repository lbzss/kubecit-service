// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"kubecit-service/ent/migrate"

	"kubecit-service/ent/account"
	"kubecit-service/ent/applyrecord"
	"kubecit-service/ent/category"
	"kubecit-service/ent/chapter"
	"kubecit-service/ent/course"
	"kubecit-service/ent/lesson"
	"kubecit-service/ent/orderinfos"
	"kubecit-service/ent/orders"
	"kubecit-service/ent/setting"
	"kubecit-service/ent/slider"
	"kubecit-service/ent/teacher"
	"kubecit-service/ent/user"
	"kubecit-service/ent/vipinfo"
	"kubecit-service/ent/viporder"
	"kubecit-service/ent/vipproduct"
	"kubecit-service/ent/wallet"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// ApplyRecord is the client for interacting with the ApplyRecord builders.
	ApplyRecord *ApplyRecordClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Chapter is the client for interacting with the Chapter builders.
	Chapter *ChapterClient
	// Course is the client for interacting with the Course builders.
	Course *CourseClient
	// Lesson is the client for interacting with the Lesson builders.
	Lesson *LessonClient
	// OrderInfos is the client for interacting with the OrderInfos builders.
	OrderInfos *OrderInfosClient
	// Orders is the client for interacting with the Orders builders.
	Orders *OrdersClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Slider is the client for interacting with the Slider builders.
	Slider *SliderClient
	// Teacher is the client for interacting with the Teacher builders.
	Teacher *TeacherClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VipInfo is the client for interacting with the VipInfo builders.
	VipInfo *VipInfoClient
	// VipOrder is the client for interacting with the VipOrder builders.
	VipOrder *VipOrderClient
	// VipProduct is the client for interacting with the VipProduct builders.
	VipProduct *VipProductClient
	// Wallet is the client for interacting with the Wallet builders.
	Wallet *WalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.ApplyRecord = NewApplyRecordClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Chapter = NewChapterClient(c.config)
	c.Course = NewCourseClient(c.config)
	c.Lesson = NewLessonClient(c.config)
	c.OrderInfos = NewOrderInfosClient(c.config)
	c.Orders = NewOrdersClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Slider = NewSliderClient(c.config)
	c.Teacher = NewTeacherClient(c.config)
	c.User = NewUserClient(c.config)
	c.VipInfo = NewVipInfoClient(c.config)
	c.VipOrder = NewVipOrderClient(c.config)
	c.VipProduct = NewVipProductClient(c.config)
	c.Wallet = NewWalletClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Account:     NewAccountClient(cfg),
		ApplyRecord: NewApplyRecordClient(cfg),
		Category:    NewCategoryClient(cfg),
		Chapter:     NewChapterClient(cfg),
		Course:      NewCourseClient(cfg),
		Lesson:      NewLessonClient(cfg),
		OrderInfos:  NewOrderInfosClient(cfg),
		Orders:      NewOrdersClient(cfg),
		Setting:     NewSettingClient(cfg),
		Slider:      NewSliderClient(cfg),
		Teacher:     NewTeacherClient(cfg),
		User:        NewUserClient(cfg),
		VipInfo:     NewVipInfoClient(cfg),
		VipOrder:    NewVipOrderClient(cfg),
		VipProduct:  NewVipProductClient(cfg),
		Wallet:      NewWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Account:     NewAccountClient(cfg),
		ApplyRecord: NewApplyRecordClient(cfg),
		Category:    NewCategoryClient(cfg),
		Chapter:     NewChapterClient(cfg),
		Course:      NewCourseClient(cfg),
		Lesson:      NewLessonClient(cfg),
		OrderInfos:  NewOrderInfosClient(cfg),
		Orders:      NewOrdersClient(cfg),
		Setting:     NewSettingClient(cfg),
		Slider:      NewSliderClient(cfg),
		Teacher:     NewTeacherClient(cfg),
		User:        NewUserClient(cfg),
		VipInfo:     NewVipInfoClient(cfg),
		VipOrder:    NewVipOrderClient(cfg),
		VipProduct:  NewVipProductClient(cfg),
		Wallet:      NewWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Account, c.ApplyRecord, c.Category, c.Chapter, c.Course, c.Lesson,
		c.OrderInfos, c.Orders, c.Setting, c.Slider, c.Teacher, c.User, c.VipInfo,
		c.VipOrder, c.VipProduct, c.Wallet,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Account, c.ApplyRecord, c.Category, c.Chapter, c.Course, c.Lesson,
		c.OrderInfos, c.Orders, c.Setting, c.Slider, c.Teacher, c.User, c.VipInfo,
		c.VipOrder, c.VipProduct, c.Wallet,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountMutation:
		return c.Account.mutate(ctx, m)
	case *ApplyRecordMutation:
		return c.ApplyRecord.mutate(ctx, m)
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *ChapterMutation:
		return c.Chapter.mutate(ctx, m)
	case *CourseMutation:
		return c.Course.mutate(ctx, m)
	case *LessonMutation:
		return c.Lesson.mutate(ctx, m)
	case *OrderInfosMutation:
		return c.OrderInfos.mutate(ctx, m)
	case *OrdersMutation:
		return c.Orders.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *SliderMutation:
		return c.Slider.mutate(ctx, m)
	case *TeacherMutation:
		return c.Teacher.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VipInfoMutation:
		return c.VipInfo.mutate(ctx, m)
	case *VipOrderMutation:
		return c.VipOrder.mutate(ctx, m)
	case *VipProductMutation:
		return c.VipProduct.mutate(ctx, m)
	case *WalletMutation:
		return c.Wallet.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `account.Intercept(f(g(h())))`.
func (c *AccountClient) Intercept(interceptors ...Interceptor) {
	c.inters.Account = append(c.inters.Account, interceptors...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id int) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id int) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccount},
		inters: c.Interceptors(),
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id int) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id int) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	return c.hooks.Account
}

// Interceptors returns the client interceptors.
func (c *AccountClient) Interceptors() []Interceptor {
	return c.inters.Account
}

func (c *AccountClient) mutate(ctx context.Context, m *AccountMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Account mutation op: %q", m.Op())
	}
}

// ApplyRecordClient is a client for the ApplyRecord schema.
type ApplyRecordClient struct {
	config
}

// NewApplyRecordClient returns a client for the ApplyRecord from the given config.
func NewApplyRecordClient(c config) *ApplyRecordClient {
	return &ApplyRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `applyrecord.Hooks(f(g(h())))`.
func (c *ApplyRecordClient) Use(hooks ...Hook) {
	c.hooks.ApplyRecord = append(c.hooks.ApplyRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `applyrecord.Intercept(f(g(h())))`.
func (c *ApplyRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApplyRecord = append(c.inters.ApplyRecord, interceptors...)
}

// Create returns a builder for creating a ApplyRecord entity.
func (c *ApplyRecordClient) Create() *ApplyRecordCreate {
	mutation := newApplyRecordMutation(c.config, OpCreate)
	return &ApplyRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApplyRecord entities.
func (c *ApplyRecordClient) CreateBulk(builders ...*ApplyRecordCreate) *ApplyRecordCreateBulk {
	return &ApplyRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApplyRecord.
func (c *ApplyRecordClient) Update() *ApplyRecordUpdate {
	mutation := newApplyRecordMutation(c.config, OpUpdate)
	return &ApplyRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplyRecordClient) UpdateOne(ar *ApplyRecord) *ApplyRecordUpdateOne {
	mutation := newApplyRecordMutation(c.config, OpUpdateOne, withApplyRecord(ar))
	return &ApplyRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplyRecordClient) UpdateOneID(id int) *ApplyRecordUpdateOne {
	mutation := newApplyRecordMutation(c.config, OpUpdateOne, withApplyRecordID(id))
	return &ApplyRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApplyRecord.
func (c *ApplyRecordClient) Delete() *ApplyRecordDelete {
	mutation := newApplyRecordMutation(c.config, OpDelete)
	return &ApplyRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplyRecordClient) DeleteOne(ar *ApplyRecord) *ApplyRecordDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplyRecordClient) DeleteOneID(id int) *ApplyRecordDeleteOne {
	builder := c.Delete().Where(applyrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplyRecordDeleteOne{builder}
}

// Query returns a query builder for ApplyRecord.
func (c *ApplyRecordClient) Query() *ApplyRecordQuery {
	return &ApplyRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplyRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ApplyRecord entity by its id.
func (c *ApplyRecordClient) Get(ctx context.Context, id int) (*ApplyRecord, error) {
	return c.Query().Where(applyrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplyRecordClient) GetX(ctx context.Context, id int) *ApplyRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ApplyRecord.
func (c *ApplyRecordClient) QueryUser(ar *ApplyRecord) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(applyrecord.Table, applyrecord.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, applyrecord.UserTable, applyrecord.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplyRecordClient) Hooks() []Hook {
	return c.hooks.ApplyRecord
}

// Interceptors returns the client interceptors.
func (c *ApplyRecordClient) Interceptors() []Interceptor {
	return c.inters.ApplyRecord
}

func (c *ApplyRecordClient) mutate(ctx context.Context, m *ApplyRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplyRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplyRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplyRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplyRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApplyRecord mutation op: %q", m.Op())
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourses queries the courses edge of a Category.
func (c *CategoryClient) QueryCourses(ca *Category) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.CoursesTable, category.CoursesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Category.
func (c *CategoryClient) QueryParent(ca *Category) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ParentTable, category.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Category.
func (c *CategoryClient) QueryChildren(ca *Category) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ChildrenTable, category.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// ChapterClient is a client for the Chapter schema.
type ChapterClient struct {
	config
}

// NewChapterClient returns a client for the Chapter from the given config.
func NewChapterClient(c config) *ChapterClient {
	return &ChapterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chapter.Hooks(f(g(h())))`.
func (c *ChapterClient) Use(hooks ...Hook) {
	c.hooks.Chapter = append(c.hooks.Chapter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chapter.Intercept(f(g(h())))`.
func (c *ChapterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chapter = append(c.inters.Chapter, interceptors...)
}

// Create returns a builder for creating a Chapter entity.
func (c *ChapterClient) Create() *ChapterCreate {
	mutation := newChapterMutation(c.config, OpCreate)
	return &ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chapter entities.
func (c *ChapterClient) CreateBulk(builders ...*ChapterCreate) *ChapterCreateBulk {
	return &ChapterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chapter.
func (c *ChapterClient) Update() *ChapterUpdate {
	mutation := newChapterMutation(c.config, OpUpdate)
	return &ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChapterClient) UpdateOne(ch *Chapter) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapter(ch))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChapterClient) UpdateOneID(id int) *ChapterUpdateOne {
	mutation := newChapterMutation(c.config, OpUpdateOne, withChapterID(id))
	return &ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chapter.
func (c *ChapterClient) Delete() *ChapterDelete {
	mutation := newChapterMutation(c.config, OpDelete)
	return &ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChapterClient) DeleteOne(ch *Chapter) *ChapterDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChapterClient) DeleteOneID(id int) *ChapterDeleteOne {
	builder := c.Delete().Where(chapter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChapterDeleteOne{builder}
}

// Query returns a query builder for Chapter.
func (c *ChapterClient) Query() *ChapterQuery {
	return &ChapterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChapter},
		inters: c.Interceptors(),
	}
}

// Get returns a Chapter entity by its id.
func (c *ChapterClient) Get(ctx context.Context, id int) (*Chapter, error) {
	return c.Query().Where(chapter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChapterClient) GetX(ctx context.Context, id int) *Chapter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLessons queries the lessons edge of a Chapter.
func (c *ChapterClient) QueryLessons(ch *Chapter) *LessonQuery {
	query := (&LessonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chapter.Table, chapter.FieldID, id),
			sqlgraph.To(lesson.Table, lesson.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chapter.LessonsTable, chapter.LessonsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCourse queries the course edge of a Chapter.
func (c *ChapterClient) QueryCourse(ch *Chapter) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chapter.Table, chapter.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chapter.CourseTable, chapter.CourseColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChapterClient) Hooks() []Hook {
	return c.hooks.Chapter
}

// Interceptors returns the client interceptors.
func (c *ChapterClient) Interceptors() []Interceptor {
	return c.inters.Chapter
}

func (c *ChapterClient) mutate(ctx context.Context, m *ChapterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChapterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChapterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChapterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChapterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chapter mutation op: %q", m.Op())
	}
}

// CourseClient is a client for the Course schema.
type CourseClient struct {
	config
}

// NewCourseClient returns a client for the Course from the given config.
func NewCourseClient(c config) *CourseClient {
	return &CourseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `course.Hooks(f(g(h())))`.
func (c *CourseClient) Use(hooks ...Hook) {
	c.hooks.Course = append(c.hooks.Course, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `course.Intercept(f(g(h())))`.
func (c *CourseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Course = append(c.inters.Course, interceptors...)
}

// Create returns a builder for creating a Course entity.
func (c *CourseClient) Create() *CourseCreate {
	mutation := newCourseMutation(c.config, OpCreate)
	return &CourseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Course entities.
func (c *CourseClient) CreateBulk(builders ...*CourseCreate) *CourseCreateBulk {
	return &CourseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Course.
func (c *CourseClient) Update() *CourseUpdate {
	mutation := newCourseMutation(c.config, OpUpdate)
	return &CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CourseClient) UpdateOne(co *Course) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourse(co))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CourseClient) UpdateOneID(id int) *CourseUpdateOne {
	mutation := newCourseMutation(c.config, OpUpdateOne, withCourseID(id))
	return &CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Course.
func (c *CourseClient) Delete() *CourseDelete {
	mutation := newCourseMutation(c.config, OpDelete)
	return &CourseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CourseClient) DeleteOne(co *Course) *CourseDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CourseClient) DeleteOneID(id int) *CourseDeleteOne {
	builder := c.Delete().Where(course.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CourseDeleteOne{builder}
}

// Query returns a query builder for Course.
func (c *CourseClient) Query() *CourseQuery {
	return &CourseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCourse},
		inters: c.Interceptors(),
	}
}

// Get returns a Course entity by its id.
func (c *CourseClient) Get(ctx context.Context, id int) (*Course, error) {
	return c.Query().Where(course.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CourseClient) GetX(ctx context.Context, id int) *Course {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Course.
func (c *CourseClient) QueryOwner(co *Course) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, course.OwnerTable, course.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChapters queries the chapters edge of a Course.
func (c *CourseClient) QueryChapters(co *Course) *ChapterQuery {
	query := (&ChapterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(chapter.Table, chapter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, course.ChaptersTable, course.ChaptersColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeacher queries the teacher edge of a Course.
func (c *CourseClient) QueryTeacher(co *Course) *TeacherQuery {
	query := (&TeacherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(course.Table, course.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, course.TeacherTable, course.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CourseClient) Hooks() []Hook {
	return c.hooks.Course
}

// Interceptors returns the client interceptors.
func (c *CourseClient) Interceptors() []Interceptor {
	return c.inters.Course
}

func (c *CourseClient) mutate(ctx context.Context, m *CourseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CourseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CourseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CourseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CourseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Course mutation op: %q", m.Op())
	}
}

// LessonClient is a client for the Lesson schema.
type LessonClient struct {
	config
}

// NewLessonClient returns a client for the Lesson from the given config.
func NewLessonClient(c config) *LessonClient {
	return &LessonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lesson.Hooks(f(g(h())))`.
func (c *LessonClient) Use(hooks ...Hook) {
	c.hooks.Lesson = append(c.hooks.Lesson, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lesson.Intercept(f(g(h())))`.
func (c *LessonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lesson = append(c.inters.Lesson, interceptors...)
}

// Create returns a builder for creating a Lesson entity.
func (c *LessonClient) Create() *LessonCreate {
	mutation := newLessonMutation(c.config, OpCreate)
	return &LessonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lesson entities.
func (c *LessonClient) CreateBulk(builders ...*LessonCreate) *LessonCreateBulk {
	return &LessonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lesson.
func (c *LessonClient) Update() *LessonUpdate {
	mutation := newLessonMutation(c.config, OpUpdate)
	return &LessonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LessonClient) UpdateOne(l *Lesson) *LessonUpdateOne {
	mutation := newLessonMutation(c.config, OpUpdateOne, withLesson(l))
	return &LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LessonClient) UpdateOneID(id int) *LessonUpdateOne {
	mutation := newLessonMutation(c.config, OpUpdateOne, withLessonID(id))
	return &LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lesson.
func (c *LessonClient) Delete() *LessonDelete {
	mutation := newLessonMutation(c.config, OpDelete)
	return &LessonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LessonClient) DeleteOne(l *Lesson) *LessonDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LessonClient) DeleteOneID(id int) *LessonDeleteOne {
	builder := c.Delete().Where(lesson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LessonDeleteOne{builder}
}

// Query returns a query builder for Lesson.
func (c *LessonClient) Query() *LessonQuery {
	return &LessonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLesson},
		inters: c.Interceptors(),
	}
}

// Get returns a Lesson entity by its id.
func (c *LessonClient) Get(ctx context.Context, id int) (*Lesson, error) {
	return c.Query().Where(lesson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LessonClient) GetX(ctx context.Context, id int) *Lesson {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChapter queries the chapter edge of a Lesson.
func (c *LessonClient) QueryChapter(l *Lesson) *ChapterQuery {
	query := (&ChapterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lesson.Table, lesson.FieldID, id),
			sqlgraph.To(chapter.Table, chapter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lesson.ChapterTable, lesson.ChapterColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LessonClient) Hooks() []Hook {
	return c.hooks.Lesson
}

// Interceptors returns the client interceptors.
func (c *LessonClient) Interceptors() []Interceptor {
	return c.inters.Lesson
}

func (c *LessonClient) mutate(ctx context.Context, m *LessonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LessonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LessonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LessonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LessonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lesson mutation op: %q", m.Op())
	}
}

// OrderInfosClient is a client for the OrderInfos schema.
type OrderInfosClient struct {
	config
}

// NewOrderInfosClient returns a client for the OrderInfos from the given config.
func NewOrderInfosClient(c config) *OrderInfosClient {
	return &OrderInfosClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderinfos.Hooks(f(g(h())))`.
func (c *OrderInfosClient) Use(hooks ...Hook) {
	c.hooks.OrderInfos = append(c.hooks.OrderInfos, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderinfos.Intercept(f(g(h())))`.
func (c *OrderInfosClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderInfos = append(c.inters.OrderInfos, interceptors...)
}

// Create returns a builder for creating a OrderInfos entity.
func (c *OrderInfosClient) Create() *OrderInfosCreate {
	mutation := newOrderInfosMutation(c.config, OpCreate)
	return &OrderInfosCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderInfos entities.
func (c *OrderInfosClient) CreateBulk(builders ...*OrderInfosCreate) *OrderInfosCreateBulk {
	return &OrderInfosCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderInfos.
func (c *OrderInfosClient) Update() *OrderInfosUpdate {
	mutation := newOrderInfosMutation(c.config, OpUpdate)
	return &OrderInfosUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderInfosClient) UpdateOne(oi *OrderInfos) *OrderInfosUpdateOne {
	mutation := newOrderInfosMutation(c.config, OpUpdateOne, withOrderInfos(oi))
	return &OrderInfosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderInfosClient) UpdateOneID(id int) *OrderInfosUpdateOne {
	mutation := newOrderInfosMutation(c.config, OpUpdateOne, withOrderInfosID(id))
	return &OrderInfosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderInfos.
func (c *OrderInfosClient) Delete() *OrderInfosDelete {
	mutation := newOrderInfosMutation(c.config, OpDelete)
	return &OrderInfosDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderInfosClient) DeleteOne(oi *OrderInfos) *OrderInfosDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderInfosClient) DeleteOneID(id int) *OrderInfosDeleteOne {
	builder := c.Delete().Where(orderinfos.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderInfosDeleteOne{builder}
}

// Query returns a query builder for OrderInfos.
func (c *OrderInfosClient) Query() *OrderInfosQuery {
	return &OrderInfosQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderInfos},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderInfos entity by its id.
func (c *OrderInfosClient) Get(ctx context.Context, id int) (*OrderInfos, error) {
	return c.Query().Where(orderinfos.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderInfosClient) GetX(ctx context.Context, id int) *OrderInfos {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderInfosClient) Hooks() []Hook {
	return c.hooks.OrderInfos
}

// Interceptors returns the client interceptors.
func (c *OrderInfosClient) Interceptors() []Interceptor {
	return c.inters.OrderInfos
}

func (c *OrderInfosClient) mutate(ctx context.Context, m *OrderInfosMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderInfosCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderInfosUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderInfosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderInfosDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderInfos mutation op: %q", m.Op())
	}
}

// OrdersClient is a client for the Orders schema.
type OrdersClient struct {
	config
}

// NewOrdersClient returns a client for the Orders from the given config.
func NewOrdersClient(c config) *OrdersClient {
	return &OrdersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orders.Hooks(f(g(h())))`.
func (c *OrdersClient) Use(hooks ...Hook) {
	c.hooks.Orders = append(c.hooks.Orders, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orders.Intercept(f(g(h())))`.
func (c *OrdersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Orders = append(c.inters.Orders, interceptors...)
}

// Create returns a builder for creating a Orders entity.
func (c *OrdersClient) Create() *OrdersCreate {
	mutation := newOrdersMutation(c.config, OpCreate)
	return &OrdersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Orders entities.
func (c *OrdersClient) CreateBulk(builders ...*OrdersCreate) *OrdersCreateBulk {
	return &OrdersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Orders.
func (c *OrdersClient) Update() *OrdersUpdate {
	mutation := newOrdersMutation(c.config, OpUpdate)
	return &OrdersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrdersClient) UpdateOne(o *Orders) *OrdersUpdateOne {
	mutation := newOrdersMutation(c.config, OpUpdateOne, withOrders(o))
	return &OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrdersClient) UpdateOneID(id int) *OrdersUpdateOne {
	mutation := newOrdersMutation(c.config, OpUpdateOne, withOrdersID(id))
	return &OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Orders.
func (c *OrdersClient) Delete() *OrdersDelete {
	mutation := newOrdersMutation(c.config, OpDelete)
	return &OrdersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrdersClient) DeleteOne(o *Orders) *OrdersDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrdersClient) DeleteOneID(id int) *OrdersDeleteOne {
	builder := c.Delete().Where(orders.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrdersDeleteOne{builder}
}

// Query returns a query builder for Orders.
func (c *OrdersClient) Query() *OrdersQuery {
	return &OrdersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrders},
		inters: c.Interceptors(),
	}
}

// Get returns a Orders entity by its id.
func (c *OrdersClient) Get(ctx context.Context, id int) (*Orders, error) {
	return c.Query().Where(orders.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrdersClient) GetX(ctx context.Context, id int) *Orders {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrdersClient) Hooks() []Hook {
	return c.hooks.Orders
}

// Interceptors returns the client interceptors.
func (c *OrdersClient) Interceptors() []Interceptor {
	return c.inters.Orders
}

func (c *OrdersClient) mutate(ctx context.Context, m *OrdersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrdersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrdersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrdersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrdersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Orders mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id int) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id int) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id int) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id int) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Setting mutation op: %q", m.Op())
	}
}

// SliderClient is a client for the Slider schema.
type SliderClient struct {
	config
}

// NewSliderClient returns a client for the Slider from the given config.
func NewSliderClient(c config) *SliderClient {
	return &SliderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slider.Hooks(f(g(h())))`.
func (c *SliderClient) Use(hooks ...Hook) {
	c.hooks.Slider = append(c.hooks.Slider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `slider.Intercept(f(g(h())))`.
func (c *SliderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Slider = append(c.inters.Slider, interceptors...)
}

// Create returns a builder for creating a Slider entity.
func (c *SliderClient) Create() *SliderCreate {
	mutation := newSliderMutation(c.config, OpCreate)
	return &SliderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Slider entities.
func (c *SliderClient) CreateBulk(builders ...*SliderCreate) *SliderCreateBulk {
	return &SliderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Slider.
func (c *SliderClient) Update() *SliderUpdate {
	mutation := newSliderMutation(c.config, OpUpdate)
	return &SliderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SliderClient) UpdateOne(s *Slider) *SliderUpdateOne {
	mutation := newSliderMutation(c.config, OpUpdateOne, withSlider(s))
	return &SliderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SliderClient) UpdateOneID(id int) *SliderUpdateOne {
	mutation := newSliderMutation(c.config, OpUpdateOne, withSliderID(id))
	return &SliderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Slider.
func (c *SliderClient) Delete() *SliderDelete {
	mutation := newSliderMutation(c.config, OpDelete)
	return &SliderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SliderClient) DeleteOne(s *Slider) *SliderDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SliderClient) DeleteOneID(id int) *SliderDeleteOne {
	builder := c.Delete().Where(slider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SliderDeleteOne{builder}
}

// Query returns a query builder for Slider.
func (c *SliderClient) Query() *SliderQuery {
	return &SliderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSlider},
		inters: c.Interceptors(),
	}
}

// Get returns a Slider entity by its id.
func (c *SliderClient) Get(ctx context.Context, id int) (*Slider, error) {
	return c.Query().Where(slider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SliderClient) GetX(ctx context.Context, id int) *Slider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SliderClient) Hooks() []Hook {
	return c.hooks.Slider
}

// Interceptors returns the client interceptors.
func (c *SliderClient) Interceptors() []Interceptor {
	return c.inters.Slider
}

func (c *SliderClient) mutate(ctx context.Context, m *SliderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SliderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SliderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SliderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SliderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Slider mutation op: %q", m.Op())
	}
}

// TeacherClient is a client for the Teacher schema.
type TeacherClient struct {
	config
}

// NewTeacherClient returns a client for the Teacher from the given config.
func NewTeacherClient(c config) *TeacherClient {
	return &TeacherClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teacher.Hooks(f(g(h())))`.
func (c *TeacherClient) Use(hooks ...Hook) {
	c.hooks.Teacher = append(c.hooks.Teacher, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teacher.Intercept(f(g(h())))`.
func (c *TeacherClient) Intercept(interceptors ...Interceptor) {
	c.inters.Teacher = append(c.inters.Teacher, interceptors...)
}

// Create returns a builder for creating a Teacher entity.
func (c *TeacherClient) Create() *TeacherCreate {
	mutation := newTeacherMutation(c.config, OpCreate)
	return &TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Teacher entities.
func (c *TeacherClient) CreateBulk(builders ...*TeacherCreate) *TeacherCreateBulk {
	return &TeacherCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Teacher.
func (c *TeacherClient) Update() *TeacherUpdate {
	mutation := newTeacherMutation(c.config, OpUpdate)
	return &TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeacherClient) UpdateOne(t *Teacher) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacher(t))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeacherClient) UpdateOneID(id int) *TeacherUpdateOne {
	mutation := newTeacherMutation(c.config, OpUpdateOne, withTeacherID(id))
	return &TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Teacher.
func (c *TeacherClient) Delete() *TeacherDelete {
	mutation := newTeacherMutation(c.config, OpDelete)
	return &TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeacherClient) DeleteOne(t *Teacher) *TeacherDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeacherClient) DeleteOneID(id int) *TeacherDeleteOne {
	builder := c.Delete().Where(teacher.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeacherDeleteOne{builder}
}

// Query returns a query builder for Teacher.
func (c *TeacherClient) Query() *TeacherQuery {
	return &TeacherQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeacher},
		inters: c.Interceptors(),
	}
}

// Get returns a Teacher entity by its id.
func (c *TeacherClient) Get(ctx context.Context, id int) (*Teacher, error) {
	return c.Query().Where(teacher.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeacherClient) GetX(ctx context.Context, id int) *Teacher {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCourses queries the courses edge of a Teacher.
func (c *TeacherClient) QueryCourses(t *Teacher) *CourseQuery {
	query := (&CourseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teacher.CoursesTable, teacher.CoursesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Teacher.
func (c *TeacherClient) QueryUser(t *Teacher) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teacher.Table, teacher.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, teacher.UserTable, teacher.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeacherClient) Hooks() []Hook {
	return c.hooks.Teacher
}

// Interceptors returns the client interceptors.
func (c *TeacherClient) Interceptors() []Interceptor {
	return c.inters.Teacher
}

func (c *TeacherClient) mutate(ctx context.Context, m *TeacherMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeacherCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeacherUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeacherUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeacherDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Teacher mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeacher queries the teacher edge of a User.
func (c *UserClient) QueryTeacher(u *User) *TeacherQuery {
	query := (&TeacherClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(teacher.Table, teacher.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.TeacherTable, user.TeacherColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplyRecord queries the apply_record edge of a User.
func (c *UserClient) QueryApplyRecord(u *User) *ApplyRecordQuery {
	query := (&ApplyRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(applyrecord.Table, applyrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApplyRecordTable, user.ApplyRecordColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVipInfo queries the vip_info edge of a User.
func (c *UserClient) QueryVipInfo(u *User) *VipInfoQuery {
	query := (&VipInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(vipinfo.Table, vipinfo.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.VipInfoTable, user.VipInfoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVipOrder queries the vip_order edge of a User.
func (c *UserClient) QueryVipOrder(u *User) *VipOrderQuery {
	query := (&VipOrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(viporder.Table, viporder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VipOrderTable, user.VipOrderColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VipInfoClient is a client for the VipInfo schema.
type VipInfoClient struct {
	config
}

// NewVipInfoClient returns a client for the VipInfo from the given config.
func NewVipInfoClient(c config) *VipInfoClient {
	return &VipInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vipinfo.Hooks(f(g(h())))`.
func (c *VipInfoClient) Use(hooks ...Hook) {
	c.hooks.VipInfo = append(c.hooks.VipInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vipinfo.Intercept(f(g(h())))`.
func (c *VipInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.VipInfo = append(c.inters.VipInfo, interceptors...)
}

// Create returns a builder for creating a VipInfo entity.
func (c *VipInfoClient) Create() *VipInfoCreate {
	mutation := newVipInfoMutation(c.config, OpCreate)
	return &VipInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VipInfo entities.
func (c *VipInfoClient) CreateBulk(builders ...*VipInfoCreate) *VipInfoCreateBulk {
	return &VipInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VipInfo.
func (c *VipInfoClient) Update() *VipInfoUpdate {
	mutation := newVipInfoMutation(c.config, OpUpdate)
	return &VipInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VipInfoClient) UpdateOne(vi *VipInfo) *VipInfoUpdateOne {
	mutation := newVipInfoMutation(c.config, OpUpdateOne, withVipInfo(vi))
	return &VipInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VipInfoClient) UpdateOneID(id int) *VipInfoUpdateOne {
	mutation := newVipInfoMutation(c.config, OpUpdateOne, withVipInfoID(id))
	return &VipInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VipInfo.
func (c *VipInfoClient) Delete() *VipInfoDelete {
	mutation := newVipInfoMutation(c.config, OpDelete)
	return &VipInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VipInfoClient) DeleteOne(vi *VipInfo) *VipInfoDeleteOne {
	return c.DeleteOneID(vi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VipInfoClient) DeleteOneID(id int) *VipInfoDeleteOne {
	builder := c.Delete().Where(vipinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VipInfoDeleteOne{builder}
}

// Query returns a query builder for VipInfo.
func (c *VipInfoClient) Query() *VipInfoQuery {
	return &VipInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVipInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a VipInfo entity by its id.
func (c *VipInfoClient) Get(ctx context.Context, id int) (*VipInfo, error) {
	return c.Query().Where(vipinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VipInfoClient) GetX(ctx context.Context, id int) *VipInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserInfo queries the user_info edge of a VipInfo.
func (c *VipInfoClient) QueryUserInfo(vi *VipInfo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vipinfo.Table, vipinfo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, vipinfo.UserInfoTable, vipinfo.UserInfoColumn),
		)
		fromV = sqlgraph.Neighbors(vi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VipInfoClient) Hooks() []Hook {
	return c.hooks.VipInfo
}

// Interceptors returns the client interceptors.
func (c *VipInfoClient) Interceptors() []Interceptor {
	return c.inters.VipInfo
}

func (c *VipInfoClient) mutate(ctx context.Context, m *VipInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VipInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VipInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VipInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VipInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VipInfo mutation op: %q", m.Op())
	}
}

// VipOrderClient is a client for the VipOrder schema.
type VipOrderClient struct {
	config
}

// NewVipOrderClient returns a client for the VipOrder from the given config.
func NewVipOrderClient(c config) *VipOrderClient {
	return &VipOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `viporder.Hooks(f(g(h())))`.
func (c *VipOrderClient) Use(hooks ...Hook) {
	c.hooks.VipOrder = append(c.hooks.VipOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `viporder.Intercept(f(g(h())))`.
func (c *VipOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.VipOrder = append(c.inters.VipOrder, interceptors...)
}

// Create returns a builder for creating a VipOrder entity.
func (c *VipOrderClient) Create() *VipOrderCreate {
	mutation := newVipOrderMutation(c.config, OpCreate)
	return &VipOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VipOrder entities.
func (c *VipOrderClient) CreateBulk(builders ...*VipOrderCreate) *VipOrderCreateBulk {
	return &VipOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VipOrder.
func (c *VipOrderClient) Update() *VipOrderUpdate {
	mutation := newVipOrderMutation(c.config, OpUpdate)
	return &VipOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VipOrderClient) UpdateOne(vo *VipOrder) *VipOrderUpdateOne {
	mutation := newVipOrderMutation(c.config, OpUpdateOne, withVipOrder(vo))
	return &VipOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VipOrderClient) UpdateOneID(id int) *VipOrderUpdateOne {
	mutation := newVipOrderMutation(c.config, OpUpdateOne, withVipOrderID(id))
	return &VipOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VipOrder.
func (c *VipOrderClient) Delete() *VipOrderDelete {
	mutation := newVipOrderMutation(c.config, OpDelete)
	return &VipOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VipOrderClient) DeleteOne(vo *VipOrder) *VipOrderDeleteOne {
	return c.DeleteOneID(vo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VipOrderClient) DeleteOneID(id int) *VipOrderDeleteOne {
	builder := c.Delete().Where(viporder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VipOrderDeleteOne{builder}
}

// Query returns a query builder for VipOrder.
func (c *VipOrderClient) Query() *VipOrderQuery {
	return &VipOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVipOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a VipOrder entity by its id.
func (c *VipOrderClient) Get(ctx context.Context, id int) (*VipOrder, error) {
	return c.Query().Where(viporder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VipOrderClient) GetX(ctx context.Context, id int) *VipOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserOrder queries the user_order edge of a VipOrder.
func (c *VipOrderClient) QueryUserOrder(vo *VipOrder) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(viporder.Table, viporder.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, viporder.UserOrderTable, viporder.UserOrderColumn),
		)
		fromV = sqlgraph.Neighbors(vo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VipOrderClient) Hooks() []Hook {
	return c.hooks.VipOrder
}

// Interceptors returns the client interceptors.
func (c *VipOrderClient) Interceptors() []Interceptor {
	return c.inters.VipOrder
}

func (c *VipOrderClient) mutate(ctx context.Context, m *VipOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VipOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VipOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VipOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VipOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VipOrder mutation op: %q", m.Op())
	}
}

// VipProductClient is a client for the VipProduct schema.
type VipProductClient struct {
	config
}

// NewVipProductClient returns a client for the VipProduct from the given config.
func NewVipProductClient(c config) *VipProductClient {
	return &VipProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vipproduct.Hooks(f(g(h())))`.
func (c *VipProductClient) Use(hooks ...Hook) {
	c.hooks.VipProduct = append(c.hooks.VipProduct, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vipproduct.Intercept(f(g(h())))`.
func (c *VipProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.VipProduct = append(c.inters.VipProduct, interceptors...)
}

// Create returns a builder for creating a VipProduct entity.
func (c *VipProductClient) Create() *VipProductCreate {
	mutation := newVipProductMutation(c.config, OpCreate)
	return &VipProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VipProduct entities.
func (c *VipProductClient) CreateBulk(builders ...*VipProductCreate) *VipProductCreateBulk {
	return &VipProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VipProduct.
func (c *VipProductClient) Update() *VipProductUpdate {
	mutation := newVipProductMutation(c.config, OpUpdate)
	return &VipProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VipProductClient) UpdateOne(vp *VipProduct) *VipProductUpdateOne {
	mutation := newVipProductMutation(c.config, OpUpdateOne, withVipProduct(vp))
	return &VipProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VipProductClient) UpdateOneID(id int) *VipProductUpdateOne {
	mutation := newVipProductMutation(c.config, OpUpdateOne, withVipProductID(id))
	return &VipProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VipProduct.
func (c *VipProductClient) Delete() *VipProductDelete {
	mutation := newVipProductMutation(c.config, OpDelete)
	return &VipProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VipProductClient) DeleteOne(vp *VipProduct) *VipProductDeleteOne {
	return c.DeleteOneID(vp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VipProductClient) DeleteOneID(id int) *VipProductDeleteOne {
	builder := c.Delete().Where(vipproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VipProductDeleteOne{builder}
}

// Query returns a query builder for VipProduct.
func (c *VipProductClient) Query() *VipProductQuery {
	return &VipProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVipProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a VipProduct entity by its id.
func (c *VipProductClient) Get(ctx context.Context, id int) (*VipProduct, error) {
	return c.Query().Where(vipproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VipProductClient) GetX(ctx context.Context, id int) *VipProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VipProductClient) Hooks() []Hook {
	return c.hooks.VipProduct
}

// Interceptors returns the client interceptors.
func (c *VipProductClient) Interceptors() []Interceptor {
	return c.inters.VipProduct
}

func (c *VipProductClient) mutate(ctx context.Context, m *VipProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VipProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VipProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VipProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VipProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VipProduct mutation op: %q", m.Op())
	}
}

// WalletClient is a client for the Wallet schema.
type WalletClient struct {
	config
}

// NewWalletClient returns a client for the Wallet from the given config.
func NewWalletClient(c config) *WalletClient {
	return &WalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallet.Hooks(f(g(h())))`.
func (c *WalletClient) Use(hooks ...Hook) {
	c.hooks.Wallet = append(c.hooks.Wallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wallet.Intercept(f(g(h())))`.
func (c *WalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.Wallet = append(c.inters.Wallet, interceptors...)
}

// Create returns a builder for creating a Wallet entity.
func (c *WalletClient) Create() *WalletCreate {
	mutation := newWalletMutation(c.config, OpCreate)
	return &WalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wallet entities.
func (c *WalletClient) CreateBulk(builders ...*WalletCreate) *WalletCreateBulk {
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wallet.
func (c *WalletClient) Update() *WalletUpdate {
	mutation := newWalletMutation(c.config, OpUpdate)
	return &WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletClient) UpdateOne(w *Wallet) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWallet(w))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletClient) UpdateOneID(id int) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWalletID(id))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wallet.
func (c *WalletClient) Delete() *WalletDelete {
	mutation := newWalletMutation(c.config, OpDelete)
	return &WalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WalletClient) DeleteOne(w *Wallet) *WalletDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WalletClient) DeleteOneID(id int) *WalletDeleteOne {
	builder := c.Delete().Where(wallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletDeleteOne{builder}
}

// Query returns a query builder for Wallet.
func (c *WalletClient) Query() *WalletQuery {
	return &WalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWallet},
		inters: c.Interceptors(),
	}
}

// Get returns a Wallet entity by its id.
func (c *WalletClient) Get(ctx context.Context, id int) (*Wallet, error) {
	return c.Query().Where(wallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletClient) GetX(ctx context.Context, id int) *Wallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WalletClient) Hooks() []Hook {
	return c.hooks.Wallet
}

// Interceptors returns the client interceptors.
func (c *WalletClient) Interceptors() []Interceptor {
	return c.inters.Wallet
}

func (c *WalletClient) mutate(ctx context.Context, m *WalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Wallet mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Account, ApplyRecord, Category, Chapter, Course, Lesson, OrderInfos, Orders,
		Setting, Slider, Teacher, User, VipInfo, VipOrder, VipProduct,
		Wallet []ent.Hook
	}
	inters struct {
		Account, ApplyRecord, Category, Chapter, Course, Lesson, OrderInfos, Orders,
		Setting, Slider, Teacher, User, VipInfo, VipOrder, VipProduct,
		Wallet []ent.Interceptor
	}
)
