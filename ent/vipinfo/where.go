// Code generated by ent, DO NOT EDIT.

package vipinfo

import (
	"kubecit-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLTE(FieldID, id))
}

// VipType applies equality check predicate on the "vip_type" field. It's identical to VipTypeEQ.
func VipType(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldVipType, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldStartAt, v))
}

// ExpireAt applies equality check predicate on the "expire_at" field. It's identical to ExpireAtEQ.
func ExpireAt(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldExpireAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldUserID, v))
}

// VipTypeEQ applies the EQ predicate on the "vip_type" field.
func VipTypeEQ(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldVipType, v))
}

// VipTypeNEQ applies the NEQ predicate on the "vip_type" field.
func VipTypeNEQ(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNEQ(FieldVipType, v))
}

// VipTypeIn applies the In predicate on the "vip_type" field.
func VipTypeIn(vs ...int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldIn(FieldVipType, vs...))
}

// VipTypeNotIn applies the NotIn predicate on the "vip_type" field.
func VipTypeNotIn(vs ...int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNotIn(FieldVipType, vs...))
}

// VipTypeGT applies the GT predicate on the "vip_type" field.
func VipTypeGT(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGT(FieldVipType, v))
}

// VipTypeGTE applies the GTE predicate on the "vip_type" field.
func VipTypeGTE(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGTE(FieldVipType, v))
}

// VipTypeLT applies the LT predicate on the "vip_type" field.
func VipTypeLT(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLT(FieldVipType, v))
}

// VipTypeLTE applies the LTE predicate on the "vip_type" field.
func VipTypeLTE(v int8) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLTE(FieldVipType, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLTE(FieldStartAt, v))
}

// ExpireAtEQ applies the EQ predicate on the "expire_at" field.
func ExpireAtEQ(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldExpireAt, v))
}

// ExpireAtNEQ applies the NEQ predicate on the "expire_at" field.
func ExpireAtNEQ(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNEQ(FieldExpireAt, v))
}

// ExpireAtIn applies the In predicate on the "expire_at" field.
func ExpireAtIn(vs ...time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldIn(FieldExpireAt, vs...))
}

// ExpireAtNotIn applies the NotIn predicate on the "expire_at" field.
func ExpireAtNotIn(vs ...time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNotIn(FieldExpireAt, vs...))
}

// ExpireAtGT applies the GT predicate on the "expire_at" field.
func ExpireAtGT(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGT(FieldExpireAt, v))
}

// ExpireAtGTE applies the GTE predicate on the "expire_at" field.
func ExpireAtGTE(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldGTE(FieldExpireAt, v))
}

// ExpireAtLT applies the LT predicate on the "expire_at" field.
func ExpireAtLT(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLT(FieldExpireAt, v))
}

// ExpireAtLTE applies the LTE predicate on the "expire_at" field.
func ExpireAtLTE(v time.Time) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldLTE(FieldExpireAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.VipInfo {
	return predicate.VipInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUserInfo applies the HasEdge predicate on the "user_info" edge.
func HasUserInfo() predicate.VipInfo {
	return predicate.VipInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserInfoTable, UserInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserInfoWith applies the HasEdge predicate on the "user_info" edge with a given conditions (other predicates).
func HasUserInfoWith(preds ...predicate.User) predicate.VipInfo {
	return predicate.VipInfo(func(s *sql.Selector) {
		step := newUserInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VipInfo) predicate.VipInfo {
	return predicate.VipInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VipInfo) predicate.VipInfo {
	return predicate.VipInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VipInfo) predicate.VipInfo {
	return predicate.VipInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
