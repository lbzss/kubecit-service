// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kubecit-service/ent/teacher"
	"kubecit-service/ent/user"
	"kubecit-service/ent/vipinfo"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uint8 `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Teacher holds the value of the teacher edge.
	Teacher *Teacher `json:"teacher,omitempty"`
	// ApplyRecord holds the value of the apply_record edge.
	ApplyRecord []*ApplyRecord `json:"apply_record,omitempty"`
	// VipInfo holds the value of the vip_info edge.
	VipInfo *VipInfo `json:"vip_info,omitempty"`
	// VipOrder holds the value of the vip_order edge.
	VipOrder []*VipOrder `json:"vip_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TeacherOrErr returns the Teacher value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TeacherOrErr() (*Teacher, error) {
	if e.loadedTypes[0] {
		if e.Teacher == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: teacher.Label}
		}
		return e.Teacher, nil
	}
	return nil, &NotLoadedError{edge: "teacher"}
}

// ApplyRecordOrErr returns the ApplyRecord value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ApplyRecordOrErr() ([]*ApplyRecord, error) {
	if e.loadedTypes[1] {
		return e.ApplyRecord, nil
	}
	return nil, &NotLoadedError{edge: "apply_record"}
}

// VipInfoOrErr returns the VipInfo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) VipInfoOrErr() (*VipInfo, error) {
	if e.loadedTypes[2] {
		if e.VipInfo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: vipinfo.Label}
		}
		return e.VipInfo, nil
	}
	return nil, &NotLoadedError{edge: "vip_info"}
}

// VipOrderOrErr returns the VipOrder value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VipOrderOrErr() ([]*VipOrder, error) {
	if e.loadedTypes[3] {
		return e.VipOrder, nil
	}
	return nil, &NotLoadedError{edge: "vip_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldRoleID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldChannel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				u.Channel = value.String
			}
		case user.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				u.RoleID = uint8(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryTeacher queries the "teacher" edge of the User entity.
func (u *User) QueryTeacher() *TeacherQuery {
	return NewUserClient(u.config).QueryTeacher(u)
}

// QueryApplyRecord queries the "apply_record" edge of the User entity.
func (u *User) QueryApplyRecord() *ApplyRecordQuery {
	return NewUserClient(u.config).QueryApplyRecord(u)
}

// QueryVipInfo queries the "vip_info" edge of the User entity.
func (u *User) QueryVipInfo() *VipInfoQuery {
	return NewUserClient(u.config).QueryVipInfo(u)
}

// QueryVipOrder queries the "vip_order" edge of the User entity.
func (u *User) QueryVipOrder() *VipOrderQuery {
	return NewUserClient(u.config).QueryVipOrder(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(u.Channel)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", u.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
