// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kubecit-service/ent/predicate"
	"kubecit-service/ent/user"
	"kubecit-service/ent/vipinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VipInfoUpdate is the builder for updating VipInfo entities.
type VipInfoUpdate struct {
	config
	hooks    []Hook
	mutation *VipInfoMutation
}

// Where appends a list predicates to the VipInfoUpdate builder.
func (viu *VipInfoUpdate) Where(ps ...predicate.VipInfo) *VipInfoUpdate {
	viu.mutation.Where(ps...)
	return viu
}

// SetVipType sets the "vip_type" field.
func (viu *VipInfoUpdate) SetVipType(i int8) *VipInfoUpdate {
	viu.mutation.ResetVipType()
	viu.mutation.SetVipType(i)
	return viu
}

// AddVipType adds i to the "vip_type" field.
func (viu *VipInfoUpdate) AddVipType(i int8) *VipInfoUpdate {
	viu.mutation.AddVipType(i)
	return viu
}

// SetStartAt sets the "start_at" field.
func (viu *VipInfoUpdate) SetStartAt(t time.Time) *VipInfoUpdate {
	viu.mutation.SetStartAt(t)
	return viu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (viu *VipInfoUpdate) SetNillableStartAt(t *time.Time) *VipInfoUpdate {
	if t != nil {
		viu.SetStartAt(*t)
	}
	return viu
}

// SetExpireAt sets the "expire_at" field.
func (viu *VipInfoUpdate) SetExpireAt(t time.Time) *VipInfoUpdate {
	viu.mutation.SetExpireAt(t)
	return viu
}

// SetUserID sets the "user_id" field.
func (viu *VipInfoUpdate) SetUserID(i int) *VipInfoUpdate {
	viu.mutation.SetUserID(i)
	return viu
}

// SetUserInfoID sets the "user_info" edge to the User entity by ID.
func (viu *VipInfoUpdate) SetUserInfoID(id int) *VipInfoUpdate {
	viu.mutation.SetUserInfoID(id)
	return viu
}

// SetUserInfo sets the "user_info" edge to the User entity.
func (viu *VipInfoUpdate) SetUserInfo(u *User) *VipInfoUpdate {
	return viu.SetUserInfoID(u.ID)
}

// Mutation returns the VipInfoMutation object of the builder.
func (viu *VipInfoUpdate) Mutation() *VipInfoMutation {
	return viu.mutation
}

// ClearUserInfo clears the "user_info" edge to the User entity.
func (viu *VipInfoUpdate) ClearUserInfo() *VipInfoUpdate {
	viu.mutation.ClearUserInfo()
	return viu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (viu *VipInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, viu.sqlSave, viu.mutation, viu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viu *VipInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := viu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (viu *VipInfoUpdate) Exec(ctx context.Context) error {
	_, err := viu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viu *VipInfoUpdate) ExecX(ctx context.Context) {
	if err := viu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viu *VipInfoUpdate) check() error {
	if _, ok := viu.mutation.UserInfoID(); viu.mutation.UserInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VipInfo.user_info"`)
	}
	return nil
}

func (viu *VipInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := viu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vipinfo.Table, vipinfo.Columns, sqlgraph.NewFieldSpec(vipinfo.FieldID, field.TypeInt))
	if ps := viu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viu.mutation.VipType(); ok {
		_spec.SetField(vipinfo.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := viu.mutation.AddedVipType(); ok {
		_spec.AddField(vipinfo.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := viu.mutation.StartAt(); ok {
		_spec.SetField(vipinfo.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := viu.mutation.ExpireAt(); ok {
		_spec.SetField(vipinfo.FieldExpireAt, field.TypeTime, value)
	}
	if viu.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vipinfo.UserInfoTable,
			Columns: []string{vipinfo.UserInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viu.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vipinfo.UserInfoTable,
			Columns: []string{vipinfo.UserInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, viu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	viu.mutation.done = true
	return n, nil
}

// VipInfoUpdateOne is the builder for updating a single VipInfo entity.
type VipInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VipInfoMutation
}

// SetVipType sets the "vip_type" field.
func (viuo *VipInfoUpdateOne) SetVipType(i int8) *VipInfoUpdateOne {
	viuo.mutation.ResetVipType()
	viuo.mutation.SetVipType(i)
	return viuo
}

// AddVipType adds i to the "vip_type" field.
func (viuo *VipInfoUpdateOne) AddVipType(i int8) *VipInfoUpdateOne {
	viuo.mutation.AddVipType(i)
	return viuo
}

// SetStartAt sets the "start_at" field.
func (viuo *VipInfoUpdateOne) SetStartAt(t time.Time) *VipInfoUpdateOne {
	viuo.mutation.SetStartAt(t)
	return viuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (viuo *VipInfoUpdateOne) SetNillableStartAt(t *time.Time) *VipInfoUpdateOne {
	if t != nil {
		viuo.SetStartAt(*t)
	}
	return viuo
}

// SetExpireAt sets the "expire_at" field.
func (viuo *VipInfoUpdateOne) SetExpireAt(t time.Time) *VipInfoUpdateOne {
	viuo.mutation.SetExpireAt(t)
	return viuo
}

// SetUserID sets the "user_id" field.
func (viuo *VipInfoUpdateOne) SetUserID(i int) *VipInfoUpdateOne {
	viuo.mutation.SetUserID(i)
	return viuo
}

// SetUserInfoID sets the "user_info" edge to the User entity by ID.
func (viuo *VipInfoUpdateOne) SetUserInfoID(id int) *VipInfoUpdateOne {
	viuo.mutation.SetUserInfoID(id)
	return viuo
}

// SetUserInfo sets the "user_info" edge to the User entity.
func (viuo *VipInfoUpdateOne) SetUserInfo(u *User) *VipInfoUpdateOne {
	return viuo.SetUserInfoID(u.ID)
}

// Mutation returns the VipInfoMutation object of the builder.
func (viuo *VipInfoUpdateOne) Mutation() *VipInfoMutation {
	return viuo.mutation
}

// ClearUserInfo clears the "user_info" edge to the User entity.
func (viuo *VipInfoUpdateOne) ClearUserInfo() *VipInfoUpdateOne {
	viuo.mutation.ClearUserInfo()
	return viuo
}

// Where appends a list predicates to the VipInfoUpdate builder.
func (viuo *VipInfoUpdateOne) Where(ps ...predicate.VipInfo) *VipInfoUpdateOne {
	viuo.mutation.Where(ps...)
	return viuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (viuo *VipInfoUpdateOne) Select(field string, fields ...string) *VipInfoUpdateOne {
	viuo.fields = append([]string{field}, fields...)
	return viuo
}

// Save executes the query and returns the updated VipInfo entity.
func (viuo *VipInfoUpdateOne) Save(ctx context.Context) (*VipInfo, error) {
	return withHooks(ctx, viuo.sqlSave, viuo.mutation, viuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (viuo *VipInfoUpdateOne) SaveX(ctx context.Context) *VipInfo {
	node, err := viuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (viuo *VipInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := viuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (viuo *VipInfoUpdateOne) ExecX(ctx context.Context) {
	if err := viuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (viuo *VipInfoUpdateOne) check() error {
	if _, ok := viuo.mutation.UserInfoID(); viuo.mutation.UserInfoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VipInfo.user_info"`)
	}
	return nil
}

func (viuo *VipInfoUpdateOne) sqlSave(ctx context.Context) (_node *VipInfo, err error) {
	if err := viuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vipinfo.Table, vipinfo.Columns, sqlgraph.NewFieldSpec(vipinfo.FieldID, field.TypeInt))
	id, ok := viuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VipInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := viuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vipinfo.FieldID)
		for _, f := range fields {
			if !vipinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vipinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := viuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := viuo.mutation.VipType(); ok {
		_spec.SetField(vipinfo.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := viuo.mutation.AddedVipType(); ok {
		_spec.AddField(vipinfo.FieldVipType, field.TypeInt8, value)
	}
	if value, ok := viuo.mutation.StartAt(); ok {
		_spec.SetField(vipinfo.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := viuo.mutation.ExpireAt(); ok {
		_spec.SetField(vipinfo.FieldExpireAt, field.TypeTime, value)
	}
	if viuo.mutation.UserInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vipinfo.UserInfoTable,
			Columns: []string{vipinfo.UserInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := viuo.mutation.UserInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   vipinfo.UserInfoTable,
			Columns: []string{vipinfo.UserInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VipInfo{config: viuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, viuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vipinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	viuo.mutation.done = true
	return _node, nil
}
